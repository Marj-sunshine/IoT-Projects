// Segment pin constants
const byte SEG_A = 3;
const byte SEG_B = 4;
const byte SEG_C = 5;
const byte SEG_D = 6;
const byte SEG_E = 7;
const byte SEG_F = 8;
const byte SEG_G = 9;

// Button pin
const byte BUTTON_PIN = 13;

// Debounce and long press constants
const unsigned long debounceDelay = 50;
const unsigned long longPressDuration = 2000;

// State variables
byte buttonState = HIGH;
byte lastButtonState = HIGH;
bool isRolling = false;
byte diceValue = 1;
unsigned long lastDebounceTime = 0;
unsigned long buttonPressTime = 0;

void setup() {
  // Initialize serial communication
  Serial.begin(9600);

  // Set 7-segment pins as outputs
  initializeSegmentPins();

  // Set the button pin as input
  pinMode(BUTTON_PIN, INPUT_PULLUP);

  // Seed the random number generator
  randomSeed(analogRead(0));

  // Display initial dice value
  displayNumber(diceValue);
}

void loop() {
  // Update the button state
  handleButtonPress();

  // Roll the dice once when the button is pressed
  if (isRolling) {
    diceValue = random(1, 7);  // Generate a number between 1 and 6
    displayNumber(diceValue);

    // Print the dice value to the serial monitor
    Serial.print("Dice Value: ");
    Serial.println(diceValue);

    isRolling = false;  // Ensure that the dice rolls only once per button press
  }
}

// Initializes segment pins
void initializeSegmentPins() {
  pinMode(SEG_A, OUTPUT);
  pinMode(SEG_B, OUTPUT);
  pinMode(SEG_C, OUTPUT);
  pinMode(SEG_D, OUTPUT);
  pinMode(SEG_E, OUTPUT);
  pinMode(SEG_F, OUTPUT);
  pinMode(SEG_G, OUTPUT);
}

// Resets all segments to off
void resetSegments() {
  // Turn off all segments (HIGH turns off segment for common anode)
  digitalWrite(SEG_A, HIGH);
  digitalWrite(SEG_B, HIGH);
  digitalWrite(SEG_C, HIGH);
  digitalWrite(SEG_D, HIGH);
  digitalWrite(SEG_E, HIGH);
  digitalWrite(SEG_F, HIGH);
  digitalWrite(SEG_G, HIGH);
}

// Handles button press state, debouncing, and long press detection
void handleButtonPress() {
  byte reading = digitalRead(BUTTON_PIN);

  if (reading != lastButtonState) {
    lastDebounceTime = millis();
  }

  if ((millis() - lastDebounceTime) > debounceDelay) {
    if (reading == LOW && buttonState == HIGH) {
      buttonPressTime = millis();
    }

    if (reading == HIGH && buttonState == LOW) {
      if ((millis() - buttonPressTime) >= longPressDuration) {
        countdown();
      } else {
        isRolling = true;
      }
    }

    buttonState = reading;
  }

  lastButtonState = reading;
}

// Displays the number on the 7-segment display
void displayNumber(byte num) {
  resetSegments();

  // Light up segments based on the dice value (LOW turns on segment)
  switch (num) {
    case 1:
      digitalWrite(SEG_B, LOW);
      digitalWrite(SEG_C, LOW);
      break;
    case 2:
      digitalWrite(SEG_A, LOW);
      digitalWrite(SEG_B, LOW);
      digitalWrite(SEG_G, LOW);
      digitalWrite(SEG_E, LOW);
      digitalWrite(SEG_D, LOW);
      break;
    case 3:
      digitalWrite(SEG_A, LOW);
      digitalWrite(SEG_B, LOW);
      digitalWrite(SEG_G, LOW);
      digitalWrite(SEG_C, LOW);
      digitalWrite(SEG_D, LOW);
      break;
    case 4:
      digitalWrite(SEG_F, LOW);
      digitalWrite(SEG_G, LOW);
      digitalWrite(SEG_B, LOW);
      digitalWrite(SEG_C, LOW);
      break;
    case 5:
      digitalWrite(SEG_A, LOW);
      digitalWrite(SEG_F, LOW);
      digitalWrite(SEG_G, LOW);
      digitalWrite(SEG_C, LOW);
      digitalWrite(SEG_D, LOW);
      break;
    case 6:
      digitalWrite(SEG_A, LOW);
      digitalWrite(SEG_F, LOW);
      digitalWrite(SEG_E, LOW);
      digitalWrite(SEG_D, LOW);
      digitalWrite(SEG_C, LOW);
      digitalWrite(SEG_G, LOW);
      break;
  }
}

// Countdown from 9 to 0 on the 7-segment display
void countdown() {
  for (int i = 9; i >= 0; i--) {
    displayNumber(i);
    delay(1000); // wait for 1 second
  }
}
